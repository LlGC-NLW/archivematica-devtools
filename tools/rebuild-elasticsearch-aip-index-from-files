#!/usr/bin/env python

import os, sys, subprocess, tempfile, shutil, ConfigParser
from optparse import OptionParser
sys.path.append("/usr/lib/archivematica/archivematicaCommon")
import elasticSearchFunctions, databaseInterface
sys.path.append("/usr/lib/archivematica/archivematicaCommon/externals")
import pyes

usage = "usage: %prog [options] <path to AIP store>"

parser = OptionParser(usage=usage)

parser.add_option('-d', '--delete', action='store_true', dest='delete',
    help='delete AIP-related ElasticSearch data before indexing AIP data')

parser.add_option('-u', '--uuid', action='store', type='string', dest='uuid',
    help='specify a single AIP, by UUID, to process')

def get_command_line_arguments(parser):

    (options, args) = parser.parse_args()

    if len(args) < 1:
        root_dir = ''
    else:
        root_dir = args[0]

    return {
        'root_dir': root_dir,
        'uuid': options.uuid,
        'delete': options.delete
    }

# Determine root of shared directories
clientConfigFilePath = '/etc/archivematica/MCPClient/clientConfig.conf'
config = ConfigParser.SafeConfigParser()
config.read(clientConfigFilePath)

try:
    sharedDirectory = config.get('MCPClient', "sharedDirectoryMounted")
except:
    print "Configuration item 'sharedDirectoryMounted' not available at /etc/archivematica/MCPClient/clientConfig.conf."
    os._exit(1)

# Clear database backups of indexed AIPs
sql = "DELETE FROM ElasticsearchIndexBackup WHERE indexName='aips' AND typeName='aipfile'"
databaseInterface.runSQL(sql)

# Get options from command-line
options = get_command_line_arguments(parser)

# Set root directory
try:
    rootdir = options['root_dir']
    if not os.path.exists(rootdir):
        print "AIP store location doesn't exist."
        os._exit(1)
except:
    parser.print_help()
    rootdir = os.path.join(sharedDirectory, 'www/AIPsStore')
    print
    print 'Default path to AIP store is: ' + rootdir
    os._exit(1)

if options['uuid'] == None:
    print "Rebuilding AIPS index from AIPS in " + rootdir + "..."
else:
    print "Rebuilding AIP UUID " + options['uuid']

def delete_aip_related_data(uuid):
    print "Deleting AIP files..."
    deleted = elasticSearchFunctions.connect_and_delete_aip_files(uuid)
    print "Deleted " + str(deleted) + " AIP files."

    print "Deleting AIP..."
    deleted = elasticSearchFunctions.delete_matching_documents(
        'aips',
        'aip',
        'uuid',
        uuid,
        max_documents=1
    )
    print "Deleted " + str(deleted) + " AIPs."

def processAIPThenDeleteMETSFile(path, temp_dir, delete_existing_data = False):
    archive_file = os.path.basename(path)
    uuid =  archive_file[-39:-3]

    if delete_existing_data == True:
        print "Deleting existing AIP-related data..."
        delete_aip_related_data(uuid)

    subdir = archive_file[:-3]
    aip_name = subdir[:-37]
    mets_file = "METS." + uuid + ".xml"
    mets_file_relative_path = subdir + "/data/" + mets_file

    print 'Processing AIP ' + uuid + '...'

    command_data = [
        '7za',
        'e',
        '-o' + temp_dir,
        path,
        mets_file_relative_path
    ]

    subprocess.call(command_data)

    elasticSearchFunctions.connect_and_index_files('aips', 'aipfile', uuid, temp_dir)
    pathToMETS = os.path.join(temp_dir, mets_file)
    elasticSearchFunctions.connect_and_index_aip(uuid, aip_name, path, pathToMETS)
    os.remove(pathToMETS)

conn = pyes.ES(elasticSearchFunctions.getElasticsearchServerHostAndPort())
try:
    conn._send_request('GET', '')
except pyes.exceptions.NoServerAvailable:
    print "Connection error: Is Elasticsearch running?"
    os._exit(1)

temp_dir = tempfile.mkdtemp()

for root, subFolders, files in os.walk(rootdir):
    for file in files:
        try:
            file.index('.7z')
            if options['uuid'] == None or options['uuid'].lower() in file.lower():
                processAIPThenDeleteMETSFile(
                    os.path.join(root, file),
                    temp_dir,
                    options['delete']
                )
        except ValueError:
            pass

print "Cleaning up..."

shutil.rmtree(temp_dir)

print "Indexing complete."
