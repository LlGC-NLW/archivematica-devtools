#!/usr/bin/env python

import os, sys, ConfigParser, uuid
from optparse import OptionParser
sys.path.append("/usr/lib/archivematica/archivematicaCommon")
import databaseInterface

##
## Tool for inspecting microservice chain and rendering SQL for altering it
##

#
# Internal helpers
#

def simple_value_query(sql):
    c, sqlLock = databaseInterface.querySQL(sql)
    row = c.fetchone()
    sqlLock.release()

    if row == None:
        return None
    else:
        return row[0]

def get_next_link(link_uuid):
    sql = "SELECT nextMicroServiceChainLink FROM MicroServiceChainLinksExitCodes WHERE microServiceChainLink='" + link_uuid + "' and exitCode=0"
    return simple_value_query(sql)

def get_previous_link(link_uuid):
    sql = "SELECT microServiceChainLink FROM MicroServiceChainLinksExitCodes WHERE nextMicroServiceChainLink='" + link_uuid + "' and exitCode=0"
    return simple_value_query(sql)

def get_link_microservice_group(link_uuid):
    sql = "SELECT microserviceGroup FROM MicroServiceChainLinks WHERE pk='" + link_uuid + "'"
    return simple_value_query(sql)

def link_exists(link_uuid):
    sql = "SELECT pk FROM MicroServiceChainLinks WHERE pk='" + link_uuid + "'"
    return simple_value_query(sql) != None

def link_for_display(link_uuid, indent=''):
    return indent + link_uuid + ' (' + get_link_task_description(link_uuid) + ')'

def get_link_task_description(link_uuid):
    sql = "SELECT currentTask FROM MicroServiceChainLinks WHERE pk='" + link_uuid + "'"
    task_config_uuid = simple_value_query(sql)

    sql = "SELECT description FROM TasksConfigs WHERE pk='" + task_config_uuid + "'"
    return simple_value_query(sql)

def generate_standard_task_config_sql_from_user_input(standard_task_uuid):
    print 'Creating new standard task config entry SQL...'
    print 'Command? '
    command = raw_input()
    print 'Arguments? '
    arguments = raw_input()

    return "INSERT INTO StandardTasksConfigs (pk, requiresOutputLock, execute, arguments) VALUES ('" + standard_task_uuid + "', 0, '" + command + "', '" + arguments + "');"

def generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid):
    print 'Creating new task entry SQL...'
    print 'Task type UUID (from TaskTypes table)? '
    task_type_uuid = raw_input()
    print 'Description? '
    description = raw_input()

    return "INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description) VALUES ('" + task_uuid + "', '" + task_type_uuid + "', '" + standard_task_uuid + "', '" + description + "');"

def generate_exit_code_sql_from_user_input(exit_code_uuid, link_uuid, next_link_uuid=None):

    if next_link_uuid == None:
        sql = "INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink, exitMessage) VALUES ('" + exit_code_uuid + "', '" + link_uuid + "', 0, NULL, 'Completed successfully');"
    else:
        sql = "INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink, exitMessage) VALUES ('" + exit_code_uuid + "', '" + link_uuid + "', 0, '" + next_link_uuid + "', 'Completed successfully');"
    return sql

#
# Command logic
#

def show_link_uuid_using_task_uuid(task_uuid):
    sql = "SELECT jobUUID FROM Tasks WHERE taskUUID='" + task_uuid + "'"
    job_uuid = simple_value_query(sql)

    if job_uuid == None:
        print "ERROR: Task not found."
    else:
        sql = "SELECT MicroServiceChainLinksPK FROM Jobs WHERE jobUUID='" + job_uuid + "'"
        link_uuid = simple_value_query(sql)

        if link_uuid == None:
            print "ERROR: Job for task not found."
        else:
            print "Link UUID: " + link_uuid

def show_link_chain_info(link_uuid):
    show_link_info(link_uuid, True)

def show_link_info(link_uuid, show_all_groups=False):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    microservice_group = get_link_microservice_group(link_uuid)

    previous_links = []

    earliest_link_found = link_uuid
    previous_link = get_previous_link(link_uuid)
    while(previous_link != None):
        earliest_link_found = previous_link
        previous_link_group = get_link_microservice_group(previous_link)
        if previous_link_group == microservice_group or show_all_groups:
            previous_links.insert(0, previous_link)
            previous_link = get_previous_link(previous_link)
        else:
            previous_link = None

    if show_all_groups:
        sql = "SELECT description FROM MicroServiceChains WHERE startingLink='" + earliest_link_found + "'"
        chain_description = simple_value_query(sql)
        sql = "SELECT pk FROM MicroServiceChains WHERE startingLink='" + earliest_link_found + "'"
        chain_uuid = simple_value_query(sql)
        print 'Chain ' + chain_uuid + ' (' + chain_description + ')'

    next_links = []

    next_link = get_next_link(link_uuid)
    while(next_link != None):
        next_link_group = get_link_microservice_group(next_link)
        if next_link_group == microservice_group or show_all_groups:
            next_links.append(next_link)
            next_link = get_next_link(next_link)
        else:
            next_link = None

    indent = '  '

    print
    print 'Link ' + link_for_display(link_uuid)
    print

    print 'Previous links: '
    for link in previous_links:
        print link_for_display(link, indent)

    print

    print 'Next links: '
    for link in next_links:
        print link_for_display(link, indent)

def insert_link_before_link(link_uuid):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    standard_task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_standard_task_config_sql_from_user_input(standard_task_uuid) + "\n"

    task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid) + "\n"

    new_link_uuid = uuid.uuid4().__str__()
    link_before_target_link = get_previous_link(link_uuid)

    print 'Creating new link SQL...'
    print 'Microservice group? '
    microservice_group = raw_input()

    # add new link that will proceed to target link after normal execution
    sql = "INSERT INTO MicroServiceChainLinks(pk, microserviceGroup, defaultExitMessage, currentTask, defaultNextChainLink) values ('" + new_link_uuid + "', '" + microservice_group + "', 'Failed', '" + task_uuid + "', '" + link_uuid + "');"
    sql_commands = sql_commands + sql + "\n"

    # add new exit code that will proceed to target link after normal execution
    exit_code_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(exit_code_uuid, new_link_uuid, link_uuid) + "\n"

    if link_before_target_link == None:
        # must update chain row to insert new link
        sql = "UPDATE MicroServiceChains SET startingLink='" + new_link_uuid + "' WHERE startingLink='" + link_uuid + "';"
        sql_commands = sql_commands + sql + "\n"
    else:
        # there is a link before our target link that we need to alter to point to our next link

        # update link before target link to proceed to new link after normal execution
        sql = "UPDATE MicroServiceChainLinks SET defaultNextChainLink='" + new_link_uuid + "' WHERE pk='" + link_before_target_link + "';"
        sql_commands = sql_commands + sql + "\n"

        sql = "UPDATE MicroServiceChainLinksExitCodes SET nextMicroServiceChainLink='" + new_link_uuid + "' WHERE microServiceChainLink='" + link_before_target_link + "';"
        sql_commands = sql_commands + sql + "\n"

    print sql_commands

def insert_link_after_link(link_uuid):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    standard_task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_standard_task_config_sql_from_user_input(standard_task_uuid) + "\n"

    task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid) + "\n"

    new_link_uuid = uuid.uuid4().__str__()
    link_after_target_link = get_next_link(link_uuid)

    print 'Creating new link SQL...'
    print 'Microservice group? '
    microservice_group = raw_input()

    if link_after_target_link == None:
        sql = "INSERT INTO MicroServiceChainLinks(pk, microserviceGroup, defaultExitMessage, currentTask, defaultNextChainLink) values ('" + new_link_uuid + "', '" + microservice_group + "', 'Failed', '" + task_uuid + "', NULL);"
    else:
        sql = "INSERT INTO MicroServiceChainLinks(pk, microserviceGroup, defaultExitMessage, currentTask, defaultNextChainLink) values ('" + new_link_uuid + "', '" + microservice_group + "', 'Failed', '" + task_uuid + "', '" + link_after_target_link + "');"
    sql_commands = sql_commands + sql + "\n"

    exit_code_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(exit_code_uuid, new_link_uuid, link_after_target_link) + "\n"

    sql = "UPDATE MicroServiceChainLinks SET defaultNextChainLink='" + new_link_uuid + "' WHERE pk='" + link_uuid + "';"
    sql_commands = sql_commands + sql + "\n"

    sql = "UPDATE MicroServiceChainLinksExitCodes SET nextMicroServiceChainLink='" + new_link_uuid + "' WHERE microServiceChainLink='" + link_uuid + "';"
    sql_commands = sql_commands + sql + "\n"

    # update target link to go to new link
    print sql_commands

def show_next(link_uuid):
    print "Next link UUID: " + str(get_next_link(link_uuid))

def show_previous(link_uuid):
    print "Previous link UUID: " + str(get_previous_link(link_uuid))

#
# CLI interface
#

def help(parser, commands):
    parser.print_help()
    print
    print 'Commands:'
    for command in commands:
        print '  ' + commands[command]['usage'].ljust(28) + commands[command]['description']

usage = "usage: %prog [options] <command>"

parser = OptionParser(usage=usage)

(options, args) = parser.parse_args()

if len(args) > 0:
    # get command from first arg
    command = args.pop(0)
else:
    command = ''

# command definitions
commands = {
    'linkfromtask': {
        'function':    'show_link_uuid_using_task_uuid',
        'usage':       'linkfromtask <task UUID>',
        'description': "use task UUID to look up corresponding link's UUID"
    },
    'info': {
        'function':    'show_link_info',
        'usage':       'info <link UUID>',
        'description': 'show other links in the same microservice group'
    },
    'chaininfo': {
        'function':    'show_link_chain_info',
        'usage':       'chaininfo <link UUID>',
        'description': 'show other links in the same chain'
    },
    'insertbefore': {
        'function':    'insert_link_before_link',
        'usage':       'insertbefore <link UUID>',
        'description': 'insert a new link before an existing link'
    },
    'insertafter': {
        'function':    'insert_link_after_link',
        'usage':       'insertafter <link UUID>',
        'description': 'insert a new link after an existing link'
    },
    'next': {
        'function':    'show_next',
        'usage':       'next <link UUID>',
        'description': 'show the UUID of the next link in the chain'
    },
    'previous': {
        'function':    'show_previous',
        'usage':       'previous <link UUID>',
        'description': 'show the UUID of the previous link in the chain'
    }
}

# execute command or show usage
if command in commands:
    command_function = commands[command]['function']
    locals()[command_function](args.pop(0))
else:
    help(parser, commands)
