#!/usr/bin/env python2
# Based on https://github.com/swordapp/swordappv2-php-library/blob/master/examples/archivematica/archivematica.php
from __future__ import print_function
import argparse
import logging
import mimetypes
import os
import re
import sys

from lxml import etree

import sword2

logger = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

CONTENTZIP = 'content.zip'
SERVICEDOCUMENT = 'http://demo.dspace.org/swordv2/servicedocument'
DEPOSITLOCATION = 'http://demo.dspace.org/swordv2/collection/10673/9'
DSPACEREST = 'https://demo.dspace.org/rest'
USER = 'dspacedemo+admin@gmail.com'
PASSWORD = 'dspace'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Upload to DSpace via SWORD2.')
    parser.add_argument('--sd', help='Service document IRI', default=SERVICEDOCUMENT)
    parser.add_argument('--user', default=USER)
    parser.add_argument('--passwd', default=PASSWORD)
    parser.add_argument('--deposit', help='Deposit location', default=DEPOSITLOCATION)
    parser.add_argument('--content', default=CONTENTZIP)
    parser.add_argument('--metadata', default=None)

    args = parser.parse_args()

    # Init conn
    logger.info('Setting up connection')
    conn = sword2.Connection(
        service_document_iri=args.sd,
        download_service_document=True,
        user_name=args.user,
        user_pass=args.passwd,
        keep_history=True,
    )

    # Get service doc
    logger.info("About to request servicedocument from %s", conn.sd_iri)
    conn.get_service_document()

    logger.debug('Service document %s', etree.tostring(conn.sd.service_dom, pretty_print=True))

    logger.info('Workspaces: %s', conn.workspaces[0])
    for w in conn.workspaces[0][1]:
        logger.info('Collection: %s %s', w.title, w.href)

    # Create item by depositing AtoM doc
    entry = sword2.Entry(
        title='Artefactual test',
        id='archivematica:id:42',
        author={'name': 'HB'},
    )
    logger.info('Atom XML %s', entry)
    logger.info('Creating entry at %s', args.deposit)
    try:
        entry_receipt = conn.create(
            col_iri=args.deposit,
            in_progress=True,
            metadata_entry=entry,
        )
    except Exception:
        logger.error('Error creating item: Status: %s, response: %s', conn.history[-1]['payload']['response'].status, conn.history[-1]['payload']['response'].resp)
        logger.error(conn.history[-1])
        raise

    logger.info('Entry Receipt %s', entry_receipt)
    logger.info('Edit IRI: %s', entry_receipt.edit)
    logger.info('Edit Media IRI: %s', entry_receipt.edit_media)
    logger.info('Statement IRI: %s', entry_receipt.atom_statement_iri)

    # Add content
    logger.info('About to add file %s to %s', args.content, entry_receipt.edit_media)
    with open(args.content, 'r') as f:
        content = f.read()
        content_receipt = conn.add_file_to_resource(
            edit_media_iri=entry_receipt.edit_media,
            payload=content,
            filename=os.path.basename(args.content),
            mimetype=mimetypes.guess_type(args.content),
        )
    logger.info('Content Receipt: %s %s', content_receipt.code, content_receipt.content)

    # Add metadata
    if args.metadata:
        logger.info('About to add file %s to %s', args.metadata, entry_receipt.edit_media)
        with open(args.metadata, 'r') as f:
            metadata_receipt = conn.add_file_to_resource(
                edit_media_iri=entry_receipt.edit_media,
                payload=f,
                filename=os.path.basename(args.metadata),
                mimetype=mimetypes.guess_type(args.metadata),
            )
        logger.info('Metadata Receipt: %s %s', metadata_receipt.code, metadata_receipt.metadata)

    # Complete deposit
    logger.info('About to complete deposit for %s', entry_receipt.edit)
    try:
        complete_receipt = conn.complete_deposit(dr=entry_receipt)
    except Exception:
        logger.error('Error creating item: Status: %s, response: %s', conn.history[-1]['payload']['response'].status, conn.history[-1]['payload']['response'].resp)
        logger.error(conn.history[-1])
        raise
    logger.info('Complete receipt: %s', complete_receipt)

    # Fetch statement
    logger.info('About to request Atom serialisation of the deposit statement from %s', entry_receipt.atom_statement_iri)
    try:
        statement = conn.get_atom_sword_statement(entry_receipt.atom_statement_iri)
    except Exception:
        logger.error('Error creating item: Status: %s, response: %s', conn.history[-1]['payload']['response'].status, conn.history[-1]['payload']['response'].resp)
        logger.error(conn.history[-1])
        raise
    logger.info('Statement: %s', statement)

    # Get DSpace handle
    regex = r'bitstream/(?P<handle>\d+/\d+)/'  # get Dspace handle regex
    match = re.search(regex, statement.original_deposits[0].id)
    if match:
        logger.info('Handle: %s', match.group('handle'))
    else:
        logger.warning('No match found in %s', statement.original_deposits[0].id)
