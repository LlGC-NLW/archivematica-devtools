#!/usr/bin/env python

import os, sys, subprocess, tempfile, shutil, ConfigParser
sys.path.append("/usr/lib/archivematica/archivematicaCommon")
import elasticSearchFunctions, databaseInterface
sys.path.append("/usr/lib/archivematica/archivematicaCommon/externals")
import pyes

# Determine root of shared directories
clientConfigFilePath = '/etc/archivematica/MCPClient/clientConfig.conf'
config = ConfigParser.SafeConfigParser()
config.read(clientConfigFilePath)

try:
    sharedDirectory = config.get('MCPClient', "sharedDirectoryMounted")
except:
    print "Configuration item 'sharedDirectoryMounted' not available at /etc/archivematica/MCPClient/clientConfig.conf."
    os._exit(1)

# Clear database backups of indexed AIPs
sql = "DELETE FROM ElasticsearchIndexBackup WHERE indexName='aips' AND typeName='aipfile'"
databaseInterface.runSQL(sql)

# Set root directory
try:
    rootdir = sys.argv[1]
    if not os.path.exists(rootdir):
        print "AIP store location doesn't exist."
        os._exit(1)
except:
    print 'usage: ' + sys.argv[0] + ' <path to AIP store>'
    rootdir = os.path.join(sharedDirectory, 'www/AIPsStore')
    print 'Default path is: ' + rootdir
    os._exit(1)

print "Rebuilding AIPS index from AIPS in " + rootdir + "..."

def processAIP(path, temp_dir):
    archive_file = os.path.basename(path)
    subdir = archive_file[:-3]
    aip_name = subdir[:-37]
    uuid =  archive_file[-39:-3]
    mets_file = "METS." + uuid + ".xml"
    mets_file_relative_path = subdir + "/data/" + mets_file

    print 'Processing AIP ' + uuid + '...'

    command_data = [
        '7za',
        'e',
        '-o' + temp_dir,
        path,
        mets_file_relative_path
    ]

    subprocess.call(command_data)

    elasticSearchFunctions.connect_and_index_files('aips', 'aipfile', uuid, temp_dir)
    pathToMETS = os.path.join(temp_dir, mets_file)
    elasticSearchFunctions.connect_and_index_aip(uuid, aip_name, path, pathToMETS)

conn = pyes.ES(elasticSearchFunctions.getElasticsearchServerHostAndPort())
try:
    conn._send_request('GET', '')
except pyes.exceptions.NoServerAvailable:
    print "Connection error: Is Elasticsearch running?"
    os._exit(1)

#try:
#    conn.delete_index('aips')
#except:
#    print "Error deleting index or index already deleted."

temp_dir = tempfile.mkdtemp()

for root, subFolders, files in os.walk(rootdir):
    for file in files:
        try:
            file.index('.7z')
            processAIP(os.path.join(root, file), temp_dir)
        except:
            pass

print "Cleaning up..."

shutil.rmtree(temp_dir)

print "Indexing complete."
