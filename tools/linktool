#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# This file is part of the Archivematica development tools.
#
# Copyright 2010-2016 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import sys
import MySQLdb
import uuid

##
## Tool for inspecting microservice chain and rendering SQL for altering it
##

#
# Internal helpers
#

def querySQL(sql, arguments=None):
    """ Ported and simplified from the now-deleted databaseInterface. """
    if isinstance(sql, unicode):
        sql = sql.encode('utf-8')
    database = MySQLdb.connect(read_default_file="/etc/archivematica/archivematicaCommon/dbsettings", charset="utf8", use_unicode = True, db='MCP')
    database.autocommit(True)

    c = database.cursor()
    c.execute(sql, arguments)

    return c


def simple_multi_value_query(sql):
    """ Returns first item from each row as a list. """
    rows = []
    c = querySQL(sql)
    row = c.fetchone()
    while row is not None:
        rows.append(row[0])
        row = c.fetchone()
    return rows

def simple_value_query(sql):
    """ Returns first item from first row of query. """
    c = querySQL(sql)
    row = c.fetchone()

    if row == None:
        return None
    else:
        return row[0]

def get_next_link(link_uuid):
    sql = """SELECT nextMicroServiceChainLink FROM MicroServiceChainLinksExitCodes WHERE microServiceChainLink='%s' AND exitCode=0""" % (link_uuid)
    return simple_value_query(sql)

def get_previous_links(link_uuid):
    sql = """SELECT microServiceChainLink FROM MicroServiceChainLinksExitCodes WHERE nextMicroServiceChainLink='%s' and exitCode=0""" % (link_uuid)
    return simple_multi_value_query(sql)

def get_link_property(link_uuid, property):
    sql = "SELECT " + property + " FROM MicroServiceChainLinks WHERE pk='%s'" % (link_uuid)
    return simple_value_query(sql)

def get_task_property(task_uuid, property):
    sql = "SELECT " + property + " FROM TasksConfigs WHERE pk='%s'" % (task_uuid)
    return simple_value_query(sql)

def get_task_type_property(task_type_uuid, property):
    sql = "SELECT " + property + " FROM TaskTypes WHERE pk='%s'" % (task_type_uuid)
    return simple_value_query(sql)

def get_std_task_config_property(config_uuid, property):
    sql = "SELECT " + property + " FROM StandardTasksConfigs WHERE pk='%s'" % (config_uuid)
    return simple_value_query(sql)

def get_link_default_next_link(link_uuid):
    sql = "SELECT defaultNextChainLink FROM MicroServiceChainLinks WHERE pk='%s'" % (link_uuid)
    return simple_value_query(sql)

def get_link_default_next_link_and_prompt_if_nonexistant(link_uuid):
    if link_uuid == None:
        default_next_chain_link = None
    else:
        default_next_chain_link = get_link_default_next_link(link_uuid)

    if default_next_chain_link == None:
        print 'Enter the UUID of a link that should be processed if an error occurs (defaultNextChainLink): '
        return raw_input()

    return default_next_chain_link

def get_link_microservice_group(link_uuid):
    sql = """SELECT microserviceGroup FROM MicroServiceChainLinks WHERE pk='%s'""" % (link_uuid)
    return simple_value_query(sql)

def link_exists(link_uuid):
    sql = """SELECT pk FROM MicroServiceChainLinks WHERE pk='%s'""" % (link_uuid)
    return simple_value_query(sql) != None

def task_exists(task_uuid):
    return get_task_property(task_uuid, 'pk') != None 

def link_for_display(link_uuid, indent=''):
    return indent + link_uuid + ' (' + get_link_task_description(link_uuid) + ')'

def get_link_task_description(link_uuid):
    sql = """SELECT currentTask FROM MicroServiceChainLinks WHERE pk='%s'""" % (link_uuid)
    task_config_uuid = simple_value_query(sql)

    sql = """SELECT description FROM TasksConfigs WHERE pk='%s'""" % (task_config_uuid)
    return simple_value_query(sql)

def get_chain_info(first_link):
    """ Returns (uuid, description) for the chain if it exists, given the first link."""
    sql = """SELECT description FROM MicroServiceChains WHERE startingLink='%s'""" % (first_link)
    chain_description = simple_value_query(sql)
    sql = """SELECT pk FROM MicroServiceChains WHERE startingLink='%s'""" % (first_link)
    chain_uuid = simple_value_query(sql)
    return (chain_uuid, chain_description)

def get_previous_links_lists(previous_link, previous_links_list, show_all_groups, microservice_group):
    while(previous_link != []):
        if len(previous_link) == 1:
            # Only one parent, process as normal
            previous_link = previous_link[0]
            previous_link_group = get_link_microservice_group(previous_link)
            if previous_link_group == microservice_group or show_all_groups:
                previous_links_list.insert(0, previous_link)
                previous_link = get_previous_links(previous_link)
            else:
                previous_link = []
        else:
            # Multiple parents - form nested structure of
            # [[parent list], [parent list], ...] through recursion
            parent_lists = []
            for link in previous_link:
                parent_list = get_previous_links_lists([link], [], show_all_groups, microservice_group)
                if parent_list != []:
                    parent_lists.insert(0, parent_list)
            previous_links_list.insert(0, parent_lists)
            # Terminate recursion for this function
            previous_link = []
    return previous_links_list

def print_nested_lists(nested_list, indent, show_all_groups):
    # print chain info
    if show_all_groups and nested_list and isinstance(nested_list[0], basestring):
        chain_uuid, chain_description = get_chain_info(nested_list[0])
        print "{}Chain {} ({})".format(indent[2:], chain_uuid, chain_description)
    for link in nested_list:
        if isinstance(link, list):
            print_nested_lists(link, indent+"  ", show_all_groups)
        elif isinstance(link, basestring):
            print link_for_display(link, indent)
        else:
            print indent+"Something went wrong"

def generate_standard_task_config_sql_from_user_input(standard_task_uuid, options):
    print 'Creating new standard task config entry SQL...'
    command = options.command
    if command == None:
        print 'Command? '
        command = raw_input()

    arguments = options.args
    if arguments == None:
        print 'Arguments? '
        arguments = raw_input()

    return """INSERT INTO StandardTasksConfigs (pk, requiresOutputLock, execute, arguments) VALUES ('%s', 0, '%s', '%s');""" % (standard_task_uuid, command, arguments)

def generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid, options):
    print 'Creating new task entry SQL...'
    task_type_uuid = options.task_type
    if task_type_uuid == None:
        print 'Task type UUID (from TaskTypes table)? '
        task_type_uuid = raw_input()

    description = options.description
    if description == None:
        print 'Description? '
        description = raw_input()

    return """INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description) VALUES ('%s', '%s', '%s', '%s');""" % (task_uuid, task_type_uuid, standard_task_uuid, description)

def generate_exit_code_sql_from_user_input(link_uuid, next_link_uuid=None):
    exit_code_uuid = uuid.uuid4().__str__()

    if next_link_uuid == None:
        sql =  """INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink, exitMessage) VALUES ('%s', '%s', 0, NULL, 'Completed successfully');""" % (exit_code_uuid, link_uuid)
    else:
        sql = """INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink, exitMessage) VALUES ('%s', '%s', 0, '%s', 'Completed successfully');""" % (exit_code_uuid, link_uuid, next_link_uuid)
    return sql
    
def generate_microservice_chain_link_sql_from_user_input(options, link_uuid, new_link_uuid, task_uuid):
    print 'Creating new link SQL...'
    microservice_group = options.microservice
    if microservice_group == None:
        print 'Microservice group?'
        microservice_group = raw_input()

    default_next_link = options.default_next
    if default_next_link == None:
        default_next_link = get_link_default_next_link_and_prompt_if_nonexistant(link_uuid)

    sql = """INSERT INTO MicroServiceChainLinks(pk, microserviceGroup, defaultExitMessage, currentTask, defaultNextChainLink) values ('%s', '%s', 'Failed', '%s', '%s');""" % (new_link_uuid, microservice_group, task_uuid, default_next_link)

    return sql

def generate_chain_sql(link_uuid, new_link_uuid):
    chain_uuid, _ = get_chain_info(link_uuid)
    sql = ''

    if chain_uuid:
        # must update chain row to insert new link
        sql = """UPDATE MicroServiceChains SET startingLink='%s' WHERE pk='%s';""" % (new_link_uuid, chain_uuid)

    return sql

def generate_exit_code_update_sql(previous_link_uuids, new_link_uuid):
    sql = ''
    for link in previous_link_uuids:
        # there is a link before our target link that we need to alter to point to our next link
        sql = """UPDATE MicroServiceChainLinksExitCodes SET nextMicroServiceChainLink='%s' WHERE microServiceChainLink='%s';""" % (new_link_uuid, link)

    return sql

#
# Command logic
#

def show_link_uuid_using_task_uuid(task_uuid):
    sql = """SELECT jobUUID FROM Tasks WHERE taskUUID='%s'""" % (task_uuid)
    job_uuid = simple_value_query(sql)

    if job_uuid == None:
        print "ERROR: Task not found."
    else:
        sql = """SELECT MicroServiceChainLinksPK FROM Jobs WHERE jobUUID='%s'""" % (job_uuid)
        link_uuid = simple_value_query(sql)

        if link_uuid == None:
            print "ERROR: Job for task not found."
        else:
            print "Link UUID: " + link_uuid

def show_link_uuid_using_job_uuid(job_uuid):
    sql = """SELECT MicroServiceChainLinksPK FROM Jobs WHERE jobUUID='%s'""" % (job_uuid)
    link_uuid = simple_value_query(sql)

    if link_uuid == None:
        print "ERROR: Job not found."
    else:
        print "Link UUID: " + link_uuid

def show_link_chain_info(link_uuid):
    show_link_info(link_uuid, True)

def show_link_info(link_uuid, show_all_groups=False):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    microservice_group = get_link_microservice_group(link_uuid)

    task_uuid = get_link_property(link_uuid, 'currentTask')
    task_type_uuid = get_task_property(task_uuid, 'taskType')
    task_type = get_task_type_property(task_type_uuid, 'description')

    std_task_config_uuid = get_task_property(task_uuid, 'taskTypePKReference')
    std_task_execute = get_std_task_config_property(std_task_config_uuid, 'execute')
    std_task_arguments = get_std_task_config_property(std_task_config_uuid, 'arguments')

    task_type_description = 'Type: ' + task_type_uuid
    if task_type != None:
        task_type_description = task_type_description + ', ' + task_type

    previous_links_list = []
    previous_link = get_previous_links(link_uuid)
    previous_links_list = get_previous_links_lists(previous_link, previous_links_list, show_all_groups, microservice_group)

    next_links = []
    next_link = get_next_link(link_uuid)
    while(next_link != None):
        next_link_group = get_link_microservice_group(next_link)
        if next_link_group == microservice_group or show_all_groups:
            next_links.append(next_link)
            next_link = get_next_link(next_link)
        else:
            next_link = None

    indent = '  '

    print
    print 'Link ' + link_for_display(link_uuid)
    print '  Task ' + task_uuid + ' (' + task_type_description + ')'
    if std_task_config_uuid:
        print '  Std Task Config: ' + std_task_config_uuid
        print '    Execute: ' + str(std_task_execute)
        print '    Arguments: ' + str(std_task_arguments)
    print

    print 'Previous links: '
    print_nested_lists(previous_links_list, indent, show_all_groups)

    print

    print 'Next links: '
    for link in next_links:
        print link_for_display(link, indent)

def insert_link_before_link(link_uuid, options):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    standard_task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_standard_task_config_sql_from_user_input(standard_task_uuid, options) + "\n"

    task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid, options) + "\n"

    new_link_uuid = uuid.uuid4().__str__()
    links_before_target_link = get_previous_links(link_uuid)

    sql_commands = sql_commands + generate_microservice_chain_link_sql_from_user_input(options, link_uuid, new_link_uuid, task_uuid)  + "\n"

    # add new exit code that will proceed to target link after normal execution
    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(new_link_uuid, link_uuid) + "\n"

    sql_commands = sql_commands + generate_exit_code_update_sql(links_before_target_link, new_link_uuid) + "\n"

    sql_commands = sql_commands + generate_chain_sql(link_uuid, new_link_uuid) + "\n"

    print sql_commands
    if options.execute:
        querySQL(sql_commands)

def insert_link_after_link(link_uuid, options):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    standard_task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_standard_task_config_sql_from_user_input(standard_task_uuid, options) + "\n"

    task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid, options) + "\n"

    new_link_uuid = uuid.uuid4().__str__()
    link_after_target_link = get_next_link(link_uuid)

    sql_commands = sql_commands + generate_microservice_chain_link_sql_from_user_input(options, link_uuid, new_link_uuid, task_uuid)  + "\n"

    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(new_link_uuid, link_after_target_link) + "\n"

    sql = """UPDATE MicroServiceChainLinksExitCodes SET nextMicroServiceChainLink='%s' WHERE microServiceChainLink='%s';""" % (new_link_uuid, link_uuid)
    sql_commands = sql_commands + sql + "\n"

    # update target link to go to new link
    print sql_commands
    if options.execute:
        querySQL(sql_commands)

def show_next(link_uuid):
    print "Next link UUID: " + str(get_next_link(link_uuid))

def show_previous(link_uuid):
    previous_uuids = get_previous_links(link_uuid)
    print "Previous link UUIDs: {0}".format(', '.join(previous_uuids))

def remove_from_chains(link_uuid):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    links_before_target_link = get_previous_links(link_uuid)
    link_after_target_link = get_next_link(link_uuid)

    if link_after_target_link == None:
        link_after_target_link = 'NULL'

    sql_commands = sql_commands + generate_chain_sql(link_uuid, link_after_target_link) + "\n"

    sql_commands = sql_commands + generate_exit_code_update_sql(links_before_target_link, link_after_target_link) + "\n"

    print sql_commands
    if options.execute:
        querySQL(sql_commands)

def replace_link_with_new_link(link_uuid, options):
    if not link_exists(link_uuid):
        print 'ERROR: link UUID ' + link_uuid + ' does not exist.'
        return

    sql_commands = ''

    standard_task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_standard_task_config_sql_from_user_input(standard_task_uuid, options) + "\n"

    task_uuid = uuid.uuid4().__str__()
    sql_commands = sql_commands + generate_task_config_sql_from_user_input(task_uuid, standard_task_uuid, options) + "\n"

    new_link_uuid = uuid.uuid4().__str__()

    links_before_target_link = get_previous_links(link_uuid)
    link_after_target_link = get_next_link(link_uuid)

    sql_commands = sql_commands + generate_microservice_chain_link_sql_from_user_input(options, link_uuid, new_link_uuid, task_uuid)  + "\n"

    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(new_link_uuid, link_after_target_link) + "\n"

    sql_commands = sql_commands + generate_exit_code_update_sql(links_before_target_link, new_link_uuid) + "\n"

    sql_commands = sql_commands + generate_chain_sql(link_uuid, new_link_uuid) + "\n"

    # update target link to go to new link
    print sql_commands
    if options.execute:
        querySQL(sql_commands)

def replace_link_with_existing_task(link_uuid_to_replace, replacement_task_uuid, options):
    if not link_exists(link_uuid_to_replace):
        print 'ERROR: link UUID ' + link_uuid_to_replace + ' does not exist.'
        return

    if not task_exists(replacement_task_uuid):
        print 'ERROR: task UUID ' + replacement_task_uuid + ' does not exist.'
        return

    sql_commands = ''

    new_link_uuid = uuid.uuid4().__str__()

    links_before_target_link = get_previous_links(link_uuid_to_replace)
    link_after_target_link = get_next_link(link_uuid_to_replace)

    sql_commands = sql_commands + generate_microservice_chain_link_sql_from_user_input(options, link_uuid_to_replace, new_link_uuid, replacement_task_uuid)  + "\n"

    sql_commands = sql_commands + generate_exit_code_sql_from_user_input(new_link_uuid, link_after_target_link) + "\n"

    sql_commands = sql_commands + generate_exit_code_update_sql(links_before_target_link, new_link_uuid) + "\n"

    sql_commands = sql_commands + generate_chain_sql(link_uuid_to_replace, new_link_uuid) + "\n"

    # update target link to go to new link
    print sql_commands
    if options.exectute:
        querySQL(sql_commands)
#
# CLI interface
#

def help(parser, commands):
    parser.print_help()
    print
    print 'Commands:'
    for command in commands:
        print '  ' + commands[command]['usage'].ljust(28) + commands[command]['description']

if __name__ == '__main__':
    usage = "usage: %prog [options] <command>"

    parser = OptionParser(usage=usage)
    parser.add_option("-m", "--microservice", action="store", dest="microservice", type="string", help="name of the microservice group")
    parser.add_option("-n", "--next", action="store", dest="default_next", type="string", help="UUID of the default next chainlink")
    parser.add_option("-c", "--command", action="store", dest="command", type="string", help="the command that should be executed")
    parser.add_option("-a", "--args", action="store", dest="args", type="string", help="the arguments that should be passed to the command")
    parser.add_option("-d", "--description", action="store", dest="description", type="string", help="description of the task")
    parser.add_option("-t", "--tasktype", action="store", dest="task_type", type="string", help="uuid of the task type")
    parser.add_option("-e", "--execute", action="store_true", dest="execute", default=False, help="execute generated sql")

    (options, args) = parser.parse_args()

    if len(args) > 0:
        # get command from first arg
        command = args.pop(0)
    else:
        command = ''

    # command definitions
    commands = {
        'linkfromtask': {
            'function':    show_link_uuid_using_task_uuid,
            'usage':       'linkfromtask <task UUID>',
            'description': "use task UUID to look up corresponding link's UUID",
            'has_options': False
        },
        'linkfromjob': {
            'function':    show_link_uuid_using_job_uuid,
            'usage':       'linkfromjob <job UUID>',
            'description': "use job UUID to look up corresponding link's UUID",
            'has_options': False
        },
        'info': {
            'function':    show_link_info,
            'usage':       'info <link UUID>',
            'description': 'show other links in the same microservice group',
            'has_options': False
        },
        'chaininfo': {
            'function':    show_link_chain_info,
            'usage':       'chaininfo <link UUID>',
            'description': 'show other links in the same chain',
            'has_options': False
        },
        'insertbefore': {
            'function':    insert_link_before_link,
            'usage':       'insertbefore <link UUID>',
            'description': 'insert a new link before an existing link',
            'has_options': True
        },
        'insertafter': {
            'function':    insert_link_after_link,
            'usage':       'insertafter <link UUID>',
            'description': 'insert a new link after an existing link',
            'has_options': True
        },
        'next': {
            'function':    show_next,
            'usage':       'next <link UUID>',
            'description': 'show the UUID of the next link in the chain',
            'has_options': False
        },
        'previous': {
            'function':    show_previous,
            'usage':       'previous <link UUID>',
            'description': 'show the UUID of the previous link in the chain',
            'has_options': False
        },
        'removefromchains': {
            'function':    remove_from_chains,
            'usage':       'removefromchains <linkUUID>',
            'description': 'removes the link from chains',
            'has_options': False
        },
        'replacewithnew': {
            'function':    replace_link_with_new_link,
            'usage':       'replacewithnew <link UUID>',
            'description': 'create a new link and replace an existing link',
            'has_options': True
        },
        'replacewithexisting': {
            'function':    replace_link_with_existing_task,
            'usage':       'replacewithexisting <link UUID to replace> <replacement task UUID>',
            'description': 'replace an existing link with an existing task (creates new link)',
            'has_options': True
       }
    }

    # execute command or show usage
    if command in commands:
        command_function = commands[command]['function']
        if commands[command]['has_options']:
            command_function(*args, options=options)
        else:
            command_function(*args)
    else:
        help(parser, commands)
